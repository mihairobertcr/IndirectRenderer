#pragma kernel CSMain

#define THREAD_GROUP_SIZE_X 1024
#define THREAD_GROUP_SIZE_Y    1
#define THREAD_GROUP_SIZE_Z    1

cbuffer CB
{
    int _NumberOfGroups;
    groupshared uint temp[2 * THREAD_GROUP_SIZE_X];
}

StructuredBuffer<uint> _GroupSumsInput;
RWStructuredBuffer<uint> _GroupSumsOutput;

// Based on Parallel Prefix Sum (Scan) with CUDA by Mark Harris
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
inline void CSMain (
        in uint3 _dispatchThreadId : SV_DispatchThreadID, // DispatchThreadID = dot(GroupID, numthreads) + GroupThreadId;
        in uint  _groupIndex       : SV_GroupIndex,       // GroupIndex = unique index of a thread inside a group
        in uint3 _groupId          : SV_GroupID,          // GroupID = index for each dimension inside a ThreadGroupCount 
        in uint3 _groupThreadId    : SV_GroupThreadID)    // GroupThreadId = indices for each dimension inside a group of the current thread
{
    int threadId = _dispatchThreadId.x;
    int groupThreadId = _groupThreadId.x;

    // Load input into shared memory
    temp[2 * groupThreadId] = _GroupSumsInput[2 * threadId];
    temp[2 * groupThreadId + 1] = _GroupSumsInput[2 * threadId + 1];
    int offset = 1;

    // Perform reduction
    int d;
    for (d = _NumberOfGroups >> 1; d > 0; d >>= 1)
    {
        GroupMemoryBarrierWithGroupSync();

        if (groupThreadId < d)
        {
            int ai = offset * (2 * groupThreadId + 1) - 1;
            int bi = offset * (2 * groupThreadId + 2) - 1;
            temp[bi] += temp[ai];
        }
        offset *= 2;
    }

    // Clear the last element
    if (threadId == 0)
    {
        temp[_NumberOfGroups - 1] = 0;
    }

    // Perform down sweep and build scan
    for (d = 1; d < _NumberOfGroups; d *= 2)
    {
        offset >>= 1;

        GroupMemoryBarrierWithGroupSync();

        if (threadId < d)
        {
            int ai = offset * (2 * groupThreadId + 1) - 1;
            int bi = offset * (2 * groupThreadId + 2) - 1;
            int t = temp[ai];
            temp[ai] = temp[bi];
            temp[bi] += t;
        }
    }

    GroupMemoryBarrierWithGroupSync();
    
    // Store to main memory
    _GroupSumsOutput[2 * threadId] = temp[2 * threadId];
    _GroupSumsOutput[2 * threadId + 1] = temp[2 * threadId + 1];
}