#include "../IndirectData.hlsl"

#pragma kernel CSMain

#define THREAD_GROUP_SIZE_X 64
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1

#define LOD00_RANGE 20
#define LOD01_RANGE 50

cbuffer CB
{
    uint _ShouldFrustumCull;
    uint _ShouldOcclusionCull;
    uint _ShouldDetailCull;
    uint _ShouldLod;
    uint _ShouldOnlyUseLod2Shadows;
    
    int _ShadowCascades;
    float _ShadowDistance;
    float _DetailCullingScreenPercentage;
    float2 _HiZTextureSize;
    float3 _CameraPosition;
    
    float4x4 _MvpMatrix;
    Texture2D _HiZMap;
    SamplerState sampler_HiZMap; // "sampler" + “_HiZMap”
};

StructuredBuffer<BoundsData> _BoundsDataBuffer;

RWStructuredBuffer<uint> _ArgsBuffer;
RWStructuredBuffer<uint> _ShadowArgsBuffer;
RWStructuredBuffer<uint> _IsVisibleBuffer;
RWStructuredBuffer<uint> _IsShadowVisibleBuffer;
RWStructuredBuffer<SortingData> _SortingData;

inline uint IsCameraOutsideObjBounds(float3 position, float3 min, float3 max)
{
    float boundsSize = distance(max, min);
    return (distance(position, max) > boundsSize) + (distance(position, min) > boundsSize);
}

inline uint IsVisibleAfterDetailCulling(float clipMinX, float clipMaxX, float clipMinY, float clipMaxY)
{
    return saturate((distance(clipMinX, clipMaxX) >= _DetailCullingScreenPercentage) + (distance(clipMinY, clipMaxY) >= _DetailCullingScreenPercentage));
}

// Hi-Z Culling
inline uint IsVisibleAfterOcclusionCulling(float clipMinX, float clipMaxX, float clipMinY, float clipMaxY, float clipMinZ)
{
    // Change it to 0 - 1 range 
    float2 minXY = float2(clipMinX, clipMinY) * 0.5 + 0.5;
    float2 maxXY = float2(clipMaxX, clipMaxY) * 0.5 + 0.5;
    
    // Calculate hi-Z buffer mip
    int2 size = (maxXY - minXY) * _HiZTextureSize.xy;
    float mip = ceil(log2(max(size.x, size.y)));
    mip = clamp(mip, 0, 10);
    
    // Texel footprint for the lower (finer-grained) level
    float  lowerLevel = max(mip - 1, 0);
    float2 scale = exp2(-lowerLevel);
    float2 a = floor(minXY * scale);
    float2 b = ceil(maxXY * scale);
    float2 dimensions = b - a;
    
    // Use the lower level if we only touch <= 2 texels in both dimensions
    if (dimensions.x <= 2 && dimensions.y <= 2)
    {
        mip = lowerLevel;
    }
    
    // find the max depth
    // Hi-Z approach that allows for more samples.
    // https://www.gamedev.net/blogs/entry/2249535-hierarchical-z-buffer-occlusion-culling-updated-07152011/
    // const   int numSamples = 24;
    const int   xSamples = 8; // numSamples + 1;
    const int   ySamples = 25; // numSamples + 1;
    
    const float widthSS = (maxXY.x - minXY.x);
    const float heightSS = (maxXY.y - minXY.y);    
    // const float maxSizeSS = max(widthSS * _HiZTextureSize.x, heightSS * _HiZTextureSize.y);    
    const float stepX = widthSS / xSamples;    
    const float stepY = heightSS / ySamples;    
    
    float hiZDepth = 1;    
    float yPosition = minXY.y;
    for(int y = 0; y < ySamples; ++y)
    {
        float xPosition = minXY.x;
        for(int x = 0; x < xSamples; ++x)
        {
            const float2 nCoords0 = float2(xPosition, yPosition);
            hiZDepth = min(hiZDepth, _HiZMap.SampleLevel(sampler_HiZMap, nCoords0, mip).r);
            xPosition += stepX;
        }
        yPosition += stepY;    
    }
    
    return (1.0 - clipMinZ) >= hiZDepth - 0.000015; // last is an epsilon
}

inline uint IsVisibleAfterFrustumCulling(float4 clipPos)
{
    return (clipPos.z > clipPos.w 
         || clipPos.x < -clipPos.w 
         || clipPos.x > clipPos.w 
         || clipPos.y < -clipPos.w 
         || clipPos.y > clipPos.w) 
         ? 0 : 1;
}

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
inline void CSMain (
        in uint3 _dispatchThreadId : SV_DispatchThreadID, // DispatchThreadID = dot(GroupID, numthreads) + GroupThreadId;
        in uint  _groupIndex       : SV_GroupIndex,       // GroupIndex = unique index of a thread inside a group
        in uint3 _groupId          : SV_GroupID,          // GroupID = index for each dimension inside a ThreadGroupCount 
        in uint3 _groupThreadId    : SV_GroupThreadID)    // GroupThreadId = indices for each dimension inside a group of the current thread
{
    // Calculate the instance index
    uint threadId = _dispatchThreadId.x;
    SortingData sortingData = _SortingData[threadId];
    uint drawCall = (sortingData.DrawCallInstanceIndex >> 16);
    uint index = (sortingData.DrawCallInstanceIndex) & 0xFFFF;

    // Reset the is visible state
    _IsVisibleBuffer[threadId] = 0;
    _IsShadowVisibleBuffer[threadId] = 0;

    // Get the instance data
    BoundsData instance = _BoundsDataBuffer[index];

    // Check if the instance is visible
    float3 minPosition = instance.BoundsCenter - instance.BoundsExtents;
    float3 maxPosition = instance.BoundsCenter + instance.BoundsExtents;

    float4 boxCorners[8];
    boxCorners[0] = float4(minPosition.x, minPosition.y, minPosition.z, 1.0);
    boxCorners[1] = float4(minPosition.x, minPosition.y, maxPosition.z, 1.0);
    boxCorners[2] = float4(minPosition.x, maxPosition.y, minPosition.z, 1.0);
    boxCorners[3] = float4(minPosition.x, maxPosition.y, maxPosition.z, 1.0);
    boxCorners[4] = float4(maxPosition.x, minPosition.y, minPosition.z, 1.0);
    boxCorners[5] = float4(maxPosition.x, minPosition.y, maxPosition.z, 1.0);
    boxCorners[6] = float4(maxPosition.x, maxPosition.y, minPosition.z, 1.0);
    boxCorners[7] = float4(maxPosition.x, maxPosition.y, maxPosition.z, 1.0);

    float4 clipPosition = mul(_MvpMatrix, boxCorners[0]);
    uint isInFrustum = IsVisibleAfterFrustumCulling(clipPosition);

    clipPosition.xyz = clipPosition.xyz / clipPosition.w;
    float clipMinX = clipPosition.x;
    float clipMaxX = clipPosition.x;
    float clipMinY = clipPosition.y;
    float clipMaxY = clipPosition.y;
    float clipMinZ = clipPosition.z;

    float minDistanceToCamera = distance(instance.BoundsCenter.xyz, _CameraPosition.xyz);
    [unroll]
    for (int i = 1; i < 8; i++)
    {
        clipPosition = mul(_MvpMatrix, boxCorners[i]);

        // For Frustum
        isInFrustum = saturate(isInFrustum + IsVisibleAfterFrustumCulling(clipPosition));

        // For HiZ
        clipPosition.xyz = clipPosition.xyz / clipPosition.w;
        clipMinX = min(clipPosition.x, clipMinX);
        clipMaxX = max(clipPosition.x, clipMaxX);
        clipMinY = min(clipPosition.y, clipMinY);
        clipMaxY = max(clipPosition.y, clipMaxY);
        clipMinZ = min(clipPosition.z, clipMinZ);

        // For LODing
        minDistanceToCamera = min(distance(boxCorners[i].xyz, _CameraPosition.xyz), minDistanceToCamera);
    }

    // We only cull instances where the camera doesn't intersect the instance 
    // bounds. If the camera is inside the bounds we want to render the object
    uint isVisible = 1;
    if (IsCameraOutsideObjBounds(_CameraPosition, minPosition, maxPosition))
    {
        // Do we pass the frustum culling...?
        isVisible *= _ShouldFrustumCull ? isInFrustum : 1;

        // Do we pass the occlusion culling...?
        isVisible *= (_ShouldOcclusionCull * isVisible > 0) ? IsVisibleAfterOcclusionCulling(clipMinX, clipMaxX, clipMinY, clipMaxY, clipMinZ) : 1;
        
        // // // Do we pass the detail (screen size) culling...?
        isVisible *= (_ShouldDetailCull * isVisible > 0) ? IsVisibleAfterDetailCulling(clipMinX, clipMaxX, clipMinY, clipMaxY) : 1;
    }

    float lod0Range = LOD00_RANGE;
    float lod1Range = LOD01_RANGE;

    // Calculate the correct index to the arguments buffers
    uint argsIndex = drawCall + 1;    
    argsIndex += 5 * (minDistanceToCamera > lod0Range);
    argsIndex += 5 * (minDistanceToCamera > lod1Range);
    argsIndex = _ShouldLod * argsIndex + ((_ShouldLod == 0) * (drawCall + 11));
    
    uint shadowArgsIndex = argsIndex;//_ShouldOnlyUseLod2Shadows ? drawCall + 11 : argsIndex;

    // Mark it as a shadow caster if it's within shadow distance...
    uint isCastingShadow = minDistanceToCamera < _ShadowDistance ? 1 : 0;

    // Output
    _IsVisibleBuffer[threadId] = isVisible;
    InterlockedAdd(_ArgsBuffer[argsIndex], isVisible);
    
    _IsShadowVisibleBuffer[threadId] = isCastingShadow;
    InterlockedAdd(_ShadowArgsBuffer[shadowArgsIndex], isCastingShadow);

    sortingData.DistanceToCamera = minDistanceToCamera;
    _SortingData[threadId] = sortingData;
}